{"version":3,"sources":["../../../../src/lib/providers/gtm/angulartics2-gtm.ts"],"names":[],"mappings":"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","file":"angulartics2-gtm.js","sourceRoot":"","sourcesContent":["import { Injectable } from '@angular/core';\n\nimport { Angulartics2, GoogleTagManagerSettings } from 'angulartics2';\n\ndeclare var dataLayer: any;\n\nexport class GoogleTagManagerDefaults implements GoogleTagManagerSettings {\n  userId = null;\n}\n\n\nexport class Angulartics2GoogleTagManager {\n\n  constructor(\n    private angulartics2: Angulartics2,\n  ) {\n    // The dataLayer needs to be initialized\n    if (typeof dataLayer !== 'undefined' && dataLayer) {\n      dataLayer = (<any>window).dataLayer = (<any>window).dataLayer || [];\n    }\n    const defaults = new GoogleTagManagerDefaults;\n    // Set the default settings for this module\n    this.angulartics2.settings.gtm = { ...defaults, ...this.angulartics2.settings.gtm };\n\n    this.angulartics2.pageTrack.subscribe((x: any) => this.pageTrack(x.path));\n\n    this.angulartics2.eventTrack.subscribe((x: any) => this.eventTrack(x.action, x.properties));\n\n    this.angulartics2.exceptionTrack.subscribe((x: any) => this.exceptionTrack(x));\n\n    this.angulartics2.setUsername.subscribe((x: string) => this.setUsername(x));\n  }\n\n  pageTrack(path: string) {\n    if (typeof dataLayer !== 'undefined' && dataLayer) {\n      dataLayer.push({\n        'event': 'Page View',\n        'content-name': path,\n        'userId': this.angulartics2.settings.gtm.userId\n      });\n    }\n  }\n\n  /**\n   * Send interactions to the dataLayer, i.e. for event tracking in Google Analytics\n   * @name eventTrack\n   *\n   * @param {string} action Required 'action' (string) associated with the event\n   * @param {object} properties Comprised of the mandatory field 'category' (string) and optional  fields 'label' (string), 'value' (integer) and 'noninteraction' (boolean)\n   */\n  eventTrack(action: string, properties: any) {\n\n    // Set a default GTM category\n    properties = properties || {};\n\n    if (typeof dataLayer !== 'undefined' && dataLayer) {\n      dataLayer.push({\n        event: properties.event || 'interaction',\n        target: properties.category || 'Event',\n        action: action,\n        label: properties.label,\n        value: properties.value,\n        interactionType: properties.noninteraction,\n        userId: this.angulartics2.settings.gtm.userId,\n        ...properties.gtmCustom\n      });\n    }\n  }\n\n  /**\n   * Exception Track Event in GTM\n   * @name exceptionTrack\n   *\n   * @param {object} properties Comprised of the mandatory fields 'appId' (string), 'appName' (string) and 'appVersion' (string) and\n   * optional  fields 'fatal' (boolean) and 'description' (string)\n   */\n  exceptionTrack(properties: any) {\n    if (! properties || ! properties.appId || ! properties.appName || ! properties.appVersion) {\n      console.error('Must be setted appId, appName and appVersion.');\n      return;\n    }\n\n    if (properties.fatal === undefined) {\n      console.log('No \"fatal\" provided, sending with fatal=true');\n      properties.exFatal = true;\n    }\n\n    properties.exDescription = properties.event ? properties.event.stack : properties.description;\n\n    this.eventTrack(`Exception thrown for ${properties.appName} <${properties.appId}@${properties.appVersion}>`, {\n      'category': 'Exception',\n      'label': properties.exDescription\n    });\n  }\n\n  /**\n   * Set userId for use with Universal Analytics User ID feature\n   * @name setUsername\n   *\n   * @param {string} userId Required 'userId' value (string) used to identify user cross-device in Google Analytics\n   */\n  setUsername(userId: string) {\n    this.angulartics2.settings.gtm.userId = userId;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Angulartics2, },\n];\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}