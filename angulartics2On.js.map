{"version":3,"sources":["../../src/lib/core/angulartics2On.ts"],"names":[],"mappings":"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","file":"angulartics2On.js","sourceRoot":"","sourcesContent":["import {\n  AfterContentInit,\n  Directive,\n  ElementRef,\n  Input,\n  Injectable,\n} from '@angular/core';\nimport { EventManager } from '@angular/platform-browser';\n\nimport { Angulartics2 } from './angulartics2';\n\n\n\nexport class Angulartics2On implements AfterContentInit {\n   angulartics2On: string;\n   angularticsAction: string;\n   angularticsCategory: string;\n   angularticsLabel: string;\n   angularticsValue: string;\n   angularticsProperties: any = {};\n\n  private el: any;\n\n  constructor(\n    private elRef: ElementRef,\n    private angulartics2: Angulartics2,\n    private eventManager: EventManager\n  ) {\n    this.el = this.elRef.nativeElement;\n  }\n\n  ngAfterContentInit() {\n    // Don't listen in server-side\n    if (this.isBrowser()) {\n      this.eventManager.addEventListener(\n        this.el,\n        this.angulartics2On || 'click',\n        (event: Event) => this.eventTrack(event),\n      );\n    }\n  }\n  isBrowser() {\n    return typeof(window) !== 'undefined';\n  }\n  eventTrack(event: Event) {\n    const action = this.angularticsAction; // || this.inferEventName();\n    const properties: any = {\n      ...this.angularticsProperties,\n      eventType: event.type,\n    };\n\n    if (this.angularticsCategory) {\n      properties.category = this.angularticsCategory;\n    }\n    if (this.angularticsLabel) {\n      properties.label = this.angularticsLabel;\n    }\n    if (this.angularticsValue) {\n      properties.value = this.angularticsValue;\n    }\n\n    this.angulartics2.eventTrack.next({\n      action,\n      properties,\n    });\n  }\n\n  /*private isCommand() {\n    return ['a:', 'button:', 'button:button', 'button:submit', 'input:button', 'input:submit'].indexOf(\n      getDOM().tagName(this.el).toLowerCase() + ':' + (getDOM().type(this.el) || '')) >= 0;\n  }\n\n  private inferEventName() {\n    if (this.isCommand()) return getDOM().getText(this.el) || getDOM().getValue(this.el);\n    return getDOM().getProperty(this.el, 'id') || getDOM().getProperty(this.el, 'name') || getDOM().tagName(this.el);\n  }*/\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n{ type: Directive, args: [{\n  selector: '[angulartics2On]'\n}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n{type: Angulartics2, },\n{type: EventManager, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'angulartics2On': [{ type: Input, args: ['angulartics2On', ] },],\n'angularticsAction': [{ type: Input },],\n'angularticsCategory': [{ type: Input },],\n'angularticsLabel': [{ type: Input },],\n'angularticsValue': [{ type: Input },],\n'angularticsProperties': [{ type: Input },],\n};\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}